var weaponsModule = require('app/weapons'),
    playersModule = require('app/players'),
    utils = require('app/utils'),
    countriesScore = {};

module.exports = {
    tryGetGameInfo: function(playerName, playerKey) {
        var player = this.getAuthPlayer(playerName, playerKey);
        if(player) {
            this.checkPlayerBonusState(player);
        }
        return {
            playerData: player,
            playersHash: playersModule.playersHash
        }
    },

    checkPlayerBonusState: function(player) {
        var now = Date.now();
        if(!player.nextBonusTime || now - player.nextBonusTime > 10 * 1000) {
            player.bonusContainerVisible = false;
            player.nextBonusTime = now + (player.nextBonusTime ? utils.random(5, 3) * 1000 * 60 : 5 * 1000);
        }
        if(now > player.nextBonusTime) {
            player.bonusContainerVisible = true;
        }
    },

    shot: function(playerName, playerKey, targetPlayerName, selectedWeaponName) {
        var player = this.getAuthPlayer(playerName, playerKey),
            weapon = player && player.getWeapon(selectedWeaponName),
            targetPlayer = playersModule.playersHash[targetPlayerName];
        if(!player || !weapon || !targetPlayer) {
            return false;
        }
        var shotResults = weapon.shot(targetPlayer, playersModule.getPlayersArray(playerName));
        shotResults.forEach(function(result) {
            if(result.isKill) {
                countriesScore[player.country.demonym] = (countriesScore[player.country.demonym] || 0) + 1;
            }
            player.actionList.push({
                type: 'shot',
                date: Date.now(),
                params: {
                    damage: result.damage,
                    isKill: result.isKill,
                    weaponName: selectedWeaponName
                }
            });
        });
        return shotResults;
    },

    catchBonusContainer: function(playerName, playerKey) {
        var player = this.getAuthPlayer(playerName, playerKey);
        if(!player) {
            return false;
        }
        player.openBonusContainer();
        return true;
    },

    getAuthPlayer(playerName, key) {
        var player = playersModule.playersHash[playerName],
            isPlayerExists = player && player.key === key;
        return isPlayerExists ? player : null;
    }
};

