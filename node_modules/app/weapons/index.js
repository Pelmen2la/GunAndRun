"use strict";

var utils = require('app/utils');

class Weapon {
    constructor(weaponData) {
        this.name = weaponData.name;
        this.minDamage = weaponData.minDamage;
        this.maxDamage = weaponData.maxDamage;
        this.accuracy = weaponData.accuracy;
        this.reloadingTime = weaponData.reloadingTime;
        this.lastShotTime = 0;
        this.ammo = weaponData.ammo;
    }

    isCanShot() {
        return this.ammo && Date.now() - this.lastShotTime < this.reloadingTime * 1000;
    }
    shot() {
        this.lastShotTime = Date.now();
        this.ammo -= 1;
        return this.getDamage();
    }
    getDamage() {
        if(Math.random() > this.accuracy) {
            return 0;
        }
        return utils.random(this.maxDamage, this.minDamage);
    }
}

class Pistol extends Weapon {
    constructor() {
        super({
            name: 'pistol',
            minDamage: 10,
            maxDamage: 20,
            accuracy: 1,
            reloadingTime: 5,
            ammo: 'Inf'
        });
    }
}

class Machinegun extends Weapon {
    constructor() {
        super({
            name: 'machinegun',
            minDamage: 30,
            maxDamage: 40,
            accuracy: 0.8,
            reloadingTime: 7,
            ammo: 40
        });
    }
}

class Rifle extends Weapon {
    constructor() {
        super({
            name: 'rifle',
            minDamage: 60,
            maxDamage: 70,
            accuracy: 0.9,
            reloadingTime: 15,
            ammo: 20
        });
    }
}

module.exports = {
    weaponsList: [new Pistol(), new Machinegun(), new Rifle()],

    getDefaultWeapon: function() {
        return this.weaponsList[0];
    },
    getWeaponList: function() {
        var pistol = new Pistol();
        return this.weaponsList.map(function(weapon) {
            weapon.lastShotTime = 0;
            return weapon;
        });
    },
};

